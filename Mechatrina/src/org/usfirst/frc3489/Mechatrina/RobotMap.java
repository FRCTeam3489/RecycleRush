package org.usfirst.frc3489.Mechatrina;
    
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainFR;
    public static SpeedController driveTrainFL;
    public static SpeedController driveTrainBL;
    public static SpeedController driveTrainBR;
    public static RobotDrive driveTrainRobotDrive;
    public static Gyro driveTrainGyroscope;

    public static AnalogInput potato;
    public static AnalogInput mashedPotato;
   /// public static Encoder EggSalad;
    
    public static SpeedController containerMotor;
    public static Talon stackEmMotor;    
    public static SpeedController intakeMotor1;
    public static SpeedController intakeMotor2;

    public static Compressor compressorTheCompressor;
    public static Solenoid intakeSolenoid1;
    public static Solenoid intakeSolenoid2;
    public static DoubleSolenoid holder1;
    
    public static DigitalInput containerUpperLimitSwitch;
    public static DigitalInput containerLowerLimitSwitch;
    public static DigitalInput toteLimitSwitch;
    public static DigitalInput stackerBottomLimitSwitch;
    public static DigitalInput stackerTopLimitSwitch;
    public static DigitalInput containerHookTote;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	
    	
    	//~~~~~~~~~SPEED CONTROLLERS/MOTORS~~~~~~~~~\\
        driveTrainFL = new CANTalon(4);
        //LiveWindow.addActuator("DriveTrain", "FL", (CANTalon) driveTrainFL);
        
        driveTrainBL = new CANTalon(1);
        //LiveWindow.addActuator("DriveTrain", "BL", (CANTalon) driveTrainBL);
        
        driveTrainBR = new CANTalon(3);
        //LiveWindow.addActuator("DriveTrain", "BR", (CANTalon) driveTrainBR);
                
        driveTrainFR = new CANTalon(2);
        //LiveWindow.addActuator("DriveTrain", "FR", (CANTalon) driveTrainFR);

        containerMotor = new Talon(5);
        //LiveWindow.addActuator("ContainerHook", "MotorHook", (Talon) containerMotor);
        
        stackEmMotor = new Talon(6);

        intakeMotor1 = new Talon(8);
        //LiveWindow.addActuator("Intake", "IntakeMotor1", (Talon) intakeMotor1);
      
        intakeMotor2 = new Talon(9);
        //LiveWindow.addActuator("Intake", "IntakeMotor2", (Talon) intakeMotor2);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainFL, driveTrainBL, driveTrainFR, driveTrainBR);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(Robot.globalVariables.driveMultiplier); 
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        
        
   

        //~~~~~~~~~DIGITAL I/O~~~~~~~~~\\
        containerLowerLimitSwitch = new DigitalInput(5);
        //LiveWindow.addSensor("Limits", "lowerLimit", containerLowerLimitSwitch);
        
        containerUpperLimitSwitch = new DigitalInput(6); 
        //LiveWindow.addSensor("Limits", "upperLimit", containerUpperLimitSwitch);
        
        containerHookTote = new DigitalInput(4);
        
        stackerBottomLimitSwitch = new DigitalInput(9);
        
        stackerTopLimitSwitch = new DigitalInput(8);
        
        toteLimitSwitch = new DigitalInput(7);
        
        //TODO: Comment out Encoder
        ///EggSalad = new Encoder(2, 3, true, EncodingType.k4X);
        //LiveWindow.addSensor("ContainerClaw", "EncoderClaw",EggSalad);
        ///EggSalad.setDistancePerPulse(250/4096); //Number of mm per revolution over pulses per revolution to attain distance per pulse (in mm)
        ///EggSalad.setSamplesToAverage(1);
        ///EggSalad.setMaxPeriod(10);
        ///EggSalad.setMinRate(5);
        ///EggSalad.reset();
        //EggSalad.setPIDSourceParameter(PIDSourceParameter.kRate);        
        
        
        
    	//~~~~~~~~~ANALOG CHANNEL~~~~~~~~~\\
        driveTrainGyroscope = new Gyro(0);
        //LiveWindow.addSensor("DriveTrain", "Gyroscope", driveTrainGyroscope);
        driveTrainGyroscope.setSensitivity(0.007);

        potato = new AnalogInput(1);
        //mashedPotato = new AnalogInput(2); // John delete this? y/n?
       
        		
        		
    	//~~~~~~~~~SOLENOID~~~~~~~~~\\
        
        intakeSolenoid1 = new Solenoid(30,6);
        //LiveWindow.addActuator("Intake", "IntakeSolenoid1", intakeSolenoid1);
        
        intakeSolenoid2 = new Solenoid(30,7);
        //LiveWindow.addActuator("Intake", "IntakeSolenoid2", intakeSolenoid2);
        
        holder1 = new DoubleSolenoid(30,1,2);
        
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    	
        
    }
}
