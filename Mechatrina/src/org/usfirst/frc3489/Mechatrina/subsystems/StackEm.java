// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.Mechatrina.subsystems;

import org.usfirst.frc3489.Mechatrina.GlobalVariables;
import org.usfirst.frc3489.Mechatrina.Robot;
import org.usfirst.frc3489.Mechatrina.RobotMap;
import org.usfirst.frc3489.Mechatrina.commands.DefaultStackEm;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class StackEm extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    DigitalInput lower = RobotMap.stackerBottomLimitSwitch;
    DigitalInput upper = RobotMap.stackerTopLimitSwitch;
    
    Talon stackEmMotor = RobotMap.stackEmMotor;
    ///Encoder eggSalad = RobotMap.EggSalad;
    int stackCounter = Robot.globalVariables.totes; //This variable is for the current amount of totes in the robot
    boolean stackingAbility = true; //This boolean tells whether we can begin to stack again.
    	//The reason is so if we go down to bottom
    
    Solenoid intakeSol1 = RobotMap.intakeSolenoid1;
    Solenoid intakeSol2 = RobotMap.intakeSolenoid2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new DefaultStackEm());
    }
    
    public void stackerDown(){
    	Robot.globalVariables.intakeSolenoidsUsable = false;
    	intakeSol1.set(false); //added code to move the intakeSolenoids backward while changing stacker position
    	intakeSol2.set(false);
    	if(lower.get() == false) {
    		stackEmMotor.set(0);
    	} else {
    		stackEmMotor.set(GlobalVariables.STACKEMMOTORDOWN);
    	}
    }
    
    public void stackerUp(){
    	Robot.globalVariables.intakeSolenoidsUsable = false;
    	intakeSol2.set(false);
    	intakeSol1.set(false);
    	if(upper.get() == true) {
    		stackEmMotor.set(GlobalVariables.STACKEMMOTORUP);
    	} else {
    		stackEmMotor.set(0);
    	}
    }    
    
    public void set(double motorSpeed){
    	stackEmMotor.set(motorSpeed);
    }
    public double motorGet(){
    	return stackEmMotor.get();
    }
}

