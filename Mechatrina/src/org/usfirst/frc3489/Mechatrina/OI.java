// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.Mechatrina;

import org.usfirst.frc3489.Mechatrina.commands.ButtonMapping;
import org.usfirst.frc3489.Mechatrina.commands.CANTalonCalibration;
import org.usfirst.frc3489.Mechatrina.commands.Camera;
import org.usfirst.frc3489.Mechatrina.commands.CloseShelf;
import org.usfirst.frc3489.Mechatrina.commands.ContainerLiftHookTotes;
import org.usfirst.frc3489.Mechatrina.commands.DeShelf;
import org.usfirst.frc3489.Mechatrina.commands.DriveBack10;
import org.usfirst.frc3489.Mechatrina.commands.FeederStationSequence;
import org.usfirst.frc3489.Mechatrina.commands.GyroOff;
import org.usfirst.frc3489.Mechatrina.commands.GyroOn;
import org.usfirst.frc3489.Mechatrina.commands.OverrideStop;
import org.usfirst.frc3489.Mechatrina.commands.StackEmPosDrive;
import org.usfirst.frc3489.Mechatrina.commands.StackEmPosFloor;
import org.usfirst.frc3489.Mechatrina.commands.StackEmPosHuman;
import org.usfirst.frc3489.Mechatrina.commands.StackEmPosScoring;
import org.usfirst.frc3489.Mechatrina.commands.StackEmPosStep;
import org.usfirst.frc3489.Mechatrina.commands.StackEmPosTop;
import org.usfirst.frc3489.Mechatrina.commands.intakeSolenoid1;
import org.usfirst.frc3489.Mechatrina.commands.intakeSolenoid2;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
	
	public Joystick arcade;
    public Joystick manipulatorLeft;
    public Joystick manipulatorRight;
    //intake buttons controlled manipulator
    public JoystickButton intake160; //intake1 60% power
    public JoystickButton intake260; //intake2 60% power
    public JoystickButton intake1100;//intake1 100% power
    public JoystickButton intake2100;//intake2 100% power
    public JoystickButton intake1off;//intake1 0 power
    public JoystickButton intake2off;//intake2 0 power
    //gripper buttons controlled by driver
    public JoystickButton gripperOpen; //opens solenoid for gripper
    // make this one button to open and close, ask 4 help heh
    public JoystickButton gripperClose; //closes solenoid for gripper
    public JoystickButton gripperRetract; //retracts gripper
    public JoystickButton gripperDeploy; //deploys gripper
    
    public JoystickButton intakeSolenoid1;
    public JoystickButton intakeSolenoid2;
    
    public JoystickButton liftUp;
    public JoystickButton liftDown;
    public JoystickButton containerUp;
    public JoystickButton containerDown;
    public JoystickButton containerTote;
    
    public JoystickButton gyroOn;
    public JoystickButton gyroOff;
    public JoystickButton mycamera;
    
    //public JoystickButton liftLowerPos;
    //public JoystickButton liftCenterPos;
    //public JoystickButton liftUpperPos;
    
    public JoystickButton pos0;
    public JoystickButton pos1;
    public JoystickButton pos2;
    public JoystickButton pos3;

    public JoystickButton openGripper;
    public JoystickButton closeGripper;
    
    public JoystickButton tote2Floor, tote2Scoring, tote2Step, tote2PickupDrive, tote2Human;
  
    public JoystickButton gyroReset;
    
    public JoystickButton toteStop;
    
    public JoystickButton toteCounterReset;
    
    public JoystickButton prepareTotes;
    
    public JoystickButton upDown;
    
    public JoystickButton stackerDown, stackerUp;
    public JoystickButton slowDown;
    public int stackCounter;
    
    public JoystickButton MapButtons;
    
    public Joystick pitStick;
    public JoystickButton StickyFaultClear;
    public JoystickButton ShelfOpen, ShelfClose;
    public JoystickButton FeederStationSequence;
    public JoystickButton KillButton;
    
    public JoystickButton unloadTotes;
    public JoystickButton scoringPos;
    public JoystickButton tote2Top;
    public JoystickButton moveBack;
    public JoystickButton Calibrate;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pitStick = new Joystick(0);
    	arcade = new Joystick(1);
    	manipulatorLeft = new Joystick(2);
    	manipulatorRight = new Joystick(3); 
    	//PITSTICK BUTTONS
//    	
//    	FeederStationSequence = new JoystickButton(pitStick, 5);
//    	FeederStationSequence.whenPressed(new FeederStationSequence());
    	KillButton = new JoystickButton(pitStick, 6);
    	KillButton.whenPressed(new OverrideStop());
    	mycamera = new JoystickButton(pitStick, 7);
    	mycamera.whenPressed(new Camera());
    	upDown = new JoystickButton(pitStick, 1);
    	upDown.whenPressed(new FeederStationSequence());
    	tote2PickupDrive = new JoystickButton(pitStick, 8);
    	tote2PickupDrive.whenPressed(new StackEmPosDrive());
    	tote2Step = new JoystickButton(pitStick, 9);
    	tote2Step.whenPressed(new StackEmPosStep());
    	tote2Scoring = new JoystickButton(pitStick, 10);
    	tote2Scoring.whenPressed(new StackEmPosScoring());
    	tote2Human = new JoystickButton(pitStick, 11);
    	tote2Human.whenPressed(new StackEmPosHuman());
    	tote2Floor = new JoystickButton(pitStick, 12);
    	tote2Floor.whenPressed(new StackEmPosFloor());
    	tote2Top = new JoystickButton(pitStick, 4);
    	tote2Top.whenPressed(new StackEmPosTop());
    	Calibrate = new JoystickButton(pitStick, 2);
    	Calibrate.whenPressed(new CANTalonCalibration());
    	

    	//ARCADE BUTTONS
    	
    	
    	gyroOff = new JoystickButton(arcade, 3);
    	gyroOff.whenPressed(new GyroOff());
    	gyroOn = new JoystickButton(arcade, 4);
    	gyroOn.whenPressed(new GyroOn());
    	moveBack = new JoystickButton(arcade, 6);
    	moveBack.whenPressed(new DriveBack10());
    	
    	//toteCounterReset = new JoystickButton(arcade, 7);
    	slowDown = new JoystickButton(arcade, 8);
    	gyroReset = new JoystickButton(arcade, 1);
    	MapButtons = new JoystickButton(arcade, 5);
    	MapButtons.whenPressed(new ButtonMapping());
    	KillButton = new JoystickButton(arcade, 7);
    	KillButton.whenPressed(new OverrideStop());
    	
    	
    	//MANIPULATOR 1 BUTTONS
   	    
//    	containerUp = new JoystickButton(manipulatorLeft, 1);
//    	containerUp.whileHeld(new ContainerLiftUp());
    	
    	scoringPos = new JoystickButton(manipulatorLeft, 1);
    	scoringPos.whenPressed(new StackEmPosScoring());
    	
    	containerTote = new JoystickButton(manipulatorLeft, 4);
    	containerTote.whenPressed(new ContainerLiftHookTotes());
    	
    	prepareTotes = new JoystickButton(manipulatorLeft, 3);
    	prepareTotes.whenPressed(new DeShelf());
    	
    	unloadTotes = new JoystickButton(manipulatorLeft, 5);
    	unloadTotes.whenPressed(new CloseShelf());
    	
    	intakeSolenoid1 = new JoystickButton(manipulatorLeft, 2);
    	intakeSolenoid1.whileHeld(new intakeSolenoid1());
//    	stackerUp = new JoystickButton(manipulatorLeft, 3);
//    	stackerUp.whileHeld(new StackEmOverrideUp());
//    	openGripper = new JoystickButton(manipulatorLeft, 4);	
//    	openGripper.whileHeld(new GripperOpen());
//    	stackerDown = new JoystickButton(manipulatorLeft, 5);
//    	stackerDown.whileHeld(new StackEmOverrideDown());
//    	closeGripper = new JoystickButton(manipulatorLeft, 6);
//    	closeGripper.whileHeld(new GripperClose());
//    	containerDown = new JoystickButton(manipulatorLeft, 7);
//    	containerDown.whileHeld(new ContainerLiftDown());

    	//MANIPULATOR 2 BUTTONS
    	
    	 
    	intakeSolenoid2 = new JoystickButton(manipulatorRight, 2);
    	intakeSolenoid2.whileHeld(new intakeSolenoid2());
    	tote2Human = new JoystickButton(manipulatorRight, 5);
    	tote2Human.whenPressed(new StackEmPosHuman());
    	upDown = new JoystickButton(manipulatorRight, 1);
    	upDown.whenPressed(new FeederStationSequence());    	
    	
    	
    	//FeederStationSequence = new JoystickButton(sticksomething, buttonsomething);
    	//FeederStationSequence.whenPressed(new FeederStationSequence());
    	
    	
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getArcade() {
        return arcade;
    }

    public Joystick getManipulatorLeft() {
        return manipulatorLeft;
    }
    
    public Joystick getManipulatorRight() {
    	return manipulatorRight;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


