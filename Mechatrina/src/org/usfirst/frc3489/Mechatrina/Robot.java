
// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.Mechatrina;

//import org.usfirst.frc3489.Mecahtrina.MultiAuto.*;
import org.usfirst.frc3489.Mechatrina.MultiAuto.ContainerPickUp;
import org.usfirst.frc3489.Mechatrina.MultiAuto.ContainerPicker;
import org.usfirst.frc3489.Mechatrina.MultiAuto.LBulldozeRamp;
import org.usfirst.frc3489.Mechatrina.MultiAuto.LBulldozeReg;
import org.usfirst.frc3489.Mechatrina.MultiAuto.NoDrive;
import org.usfirst.frc3489.Mechatrina.MultiAuto.RBulldozeRamp;
import org.usfirst.frc3489.Mechatrina.MultiAuto.RBulldozeReg;
import org.usfirst.frc3489.Mechatrina.MultiAuto.TripleStackContainer;
import org.usfirst.frc3489.Mechatrina.MultiAuto.TripleStackSolo;
import org.usfirst.frc3489.Mechatrina.MultiAuto.TripleStackTote;
///import org.usfirst.frc3489.Mechatrina.subsystems.ContainerEncoder;
import org.usfirst.frc3489.Mechatrina.subsystems.ContainerGripper;
import org.usfirst.frc3489.Mechatrina.subsystems.ContainerLifter;
import org.usfirst.frc3489.Mechatrina.subsystems.DriveTrain;
import org.usfirst.frc3489.Mechatrina.subsystems.IntakeMotor;
import org.usfirst.frc3489.Mechatrina.subsystems.IntakeSolenoid1;
import org.usfirst.frc3489.Mechatrina.subsystems.IntakeSolenoid2;
import org.usfirst.frc3489.Mechatrina.subsystems.StackEm;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
//Sendable Chooser added by John
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    //TODO John - Watchdog?  Drop Camera
	// USBCamera USBCamera;
	Command autonomousCommand;
    SendableChooser autoChooser;
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static StackEm stackEm;
    public static IntakeMotor intakeMotor;
    public static IntakeSolenoid1 intakeSolenoid1;
    public static IntakeSolenoid2 intakeSolenoid2;
    public static ContainerLifter containerLifter;
    public static ContainerGripper containerGripper;
    ///public static ContainerEncoder containerEncoder;
    public static GlobalVariables globalVariables;
    public static Joystick pitStick;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	
    	globalVariables = new GlobalVariables(); //Global Variables first so other things can reference them.
        RobotMap.init();
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        stackEm = new StackEm();
        intakeMotor = new IntakeMotor();
        intakeSolenoid1 = new IntakeSolenoid1();
        intakeSolenoid2 = new IntakeSolenoid2();
        containerLifter = new ContainerLifter();
        containerGripper = new ContainerGripper();
    	SmartDashboard.putBoolean("Tote Override? ", Robot.globalVariables.OverrideStop);
    	SmartDashboard.putString("Put all buttons? " , "Push button 5");
    	/// containerEncoder = new ContainerEncoder();
        
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        // John 02/25/15 - Combine autoChooser, comment out autonomouseCommand
        // autonomousCommand = new AutoMultimode();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        // instantiate the command used for the autonomous period
        
        // John 02/25/15 - Import to include all commands under MultiAuto
        // import org.usfirst.frc3489.Mecahtrina.MultiAuto.*;
        // if you use [CTRL]+[SHIFT]+[O] the include will be changed to be each command
		autoChooser = new SendableChooser();
		//TODO: What if there were 2 default commands? - Maddi's question
		autoChooser.addObject("Container pickup", new ContainerPickUp());
		autoChooser.addDefault("Container pickup & drive", new ContainerPicker());
		autoChooser.addDefault("Do not drive", new NoDrive());
		autoChooser.addObject("Right Facing Bulldoze w/o Ramp", new RBulldozeReg());
		autoChooser.addObject("Left Facing Bulldoze w/o Ramp", new LBulldozeReg()); 
		autoChooser.addObject("Right Facing Bulldoze With Ramp", new RBulldozeRamp());
		autoChooser.addObject("Left Facing Bulldoze With Ramp", new LBulldozeRamp());
		autoChooser.addObject("Triple Stack Solo push", new TripleStackSolo());
		autoChooser.addObject("Triple Stack with Container", new TripleStackContainer());
		autoChooser.addObject("Triple Stack just Totes", new TripleStackTote());
		SmartDashboard.putData("Swag chosen", autoChooser);
		
		
		Robot.globalVariables.intakeSolenoidsUsable = true;
		Robot.globalVariables.posFLOORUPPER = 4.3;
		Robot.globalVariables.posFLOORLOWER = 4.5;
		Robot.globalVariables.posSCORINGUPPER = 3.79;
		Robot.globalVariables.posSCORINGLOWER = 3.99;
		Robot.globalVariables.posSTEPUPPER = 2.27;
		Robot.globalVariables.posSTEPLOWER = 2.47;
		Robot.globalVariables.posDRIVEUPPER = 2.47;
		Robot.globalVariables.posDRIVELOWER = 2.67;
		Robot.globalVariables.posHUMANUPPER = 2.76;
		Robot.globalVariables.posHUMANLOWER = 2.96;
        
		Robot.globalVariables.STACKEMMOTORUP = 1;
		Robot.globalVariables.STACKEMMOTORDOWN = -0.45;
        
		Robot.globalVariables.driveMultiplier = 1.0;
		Robot.globalVariables.gyroState = true;
        
		Robot.globalVariables.totes = 0;
        
		Robot.globalVariables.autoCancel = false;
        
		Robot.globalVariables.eggBOTTOM = 0;
		Robot.globalVariables.eggHOOKTOTES = 820;
		Robot.globalVariables.eggDROPTOTE1 = 492;
		Robot.globalVariables.eggDROPTOTE2 = 16;
        
		Robot.globalVariables.eggHIGHLOWDIFFERENTIAL = 30;
        
		Robot.globalVariables.toteProxSensorLimit = 4000;
        
		Robot.globalVariables.STACKOUT = false;
		Robot.globalVariables.containerDown = false;
		Robot.globalVariables.OverrideStop = false;
        
		Robot.globalVariables.toteUp = false;
		Robot.globalVariables.toteDown = false;
		
		
		
		//TODO John - Watchdog?
		//USBCamera = new USBCamera();
        // John - 02/25/2015 Removed ExampleCommand
		//autonomousCommand = new ExampleCommand();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	// Add if statement to cover error in reading smart dashboard - default to RBulldozeReg 
    	autonomousCommand = (Command) autoChooser.getSelected();
    	autonomousCommand.start();
        // schedule the autonomous command (example)
        // John - 02/25/2015 Removed autonomousCommand, now starting from autoChooser
    	//if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
       //TODO: John - Watchdog?  
        //USBCamera.openCamera();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	//Remove SmartDashboard
    	//Test for delay in update on start TeleOp
    	//SmartDashboard.putNumber("Gyro", RobotMap.driveTrainGyroscope.getAngle());
    	//SmartDashboard.putBoolean("Limit Switch", RobotMap.containerHookTote.get());
    	//SmartDashboard.putBoolean("Lower Switch", RobotMap.containerLowerLimitSwitch.get());
    	
    	
    	//TODO COMMENT THESE OUT WHEN DONE
        //DigitalInput lower = RobotMap.stackerBottomLimitSwitch;
        //DigitalInput upper = RobotMap.stackerTopLimitSwitch;
    	//SmartDashboard.putBoolean("Top Limit Switch - ", upper.get());
    	//SmartDashboard.putBoolean("Lower Limit Switch - ", lower.get());
        SmartDashboard.putNumber("String Pot - ", RobotMap.potato.getVoltage());
    	
    	Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    	
    	//Test for delay in update on start TeleOp
    	
    	SmartDashboard.putNumber("Gyro", RobotMap.driveTrainGyroscope.getAngle());
    	SmartDashboard.putString("Press 1 (trigger) on Pit Stick (0)","initGyro");
    	
    	// if (pitStick.getRawButton(1) == true){
    	//	RobotMap.driveTrainGyroscope.initGyro();
    	// }
        
    	
    	LiveWindow.run();
		
        SmartDashboard.putNumber("StringPot:", RobotMap.potato.getVoltage());
        SmartDashboard.putNumber("Potato value:", RobotMap.mashedPotato.getValue());
        SmartDashboard.putNumber("Potato volt:", RobotMap.mashedPotato.getVoltage());
        //SmartDashboard.getNumber("x-Ray",OI.joy)
        
        //Copied from teleopPeriotic - untested 02/27/15 @ 2:39 PM
        
        SmartDashboard.putBoolean("IntakeSolenoids Useable?", Robot.globalVariables.intakeSolenoidsUsable);
        SmartDashboard.putNumber("Potato reading:", RobotMap.potato.getVoltage());
        //SmartDashboard.putNumber("Potato value:", RobotMap.mashedPotato.getValue());
        //SmartDashboard.putNumber("Potato volt:", RobotMap.mashedPotato.getVoltage());
        SmartDashboard.putBoolean("ToteSensor", RobotMap.toteLimitSwitch.get());
        SmartDashboard.putBoolean("Switchy:", RobotMap.stackerTopLimitSwitch.get());
        SmartDashboard.putBoolean("Low Switchy:", RobotMap.stackerBottomLimitSwitch.get());
        SmartDashboard.putNumber("Amount of totes:", Robot.globalVariables.totes);

        SmartDashboard.putNumber("X-AXIS = ", oi.arcade.getX());
        SmartDashboard.putNumber("Y-AXIS = ", oi.arcade.getY());
        SmartDashboard.putNumber("Z-AXIS = ", oi.arcade.getZ());
        

        RobotMap.driveTrainBL.set(SmartDashboard.getNumber("CAN BackLeft:"));
        RobotMap.driveTrainFL.set(SmartDashboard.getNumber("CAN FrontLeft:"));
        RobotMap.driveTrainBR.set(SmartDashboard.getNumber("CAN BackRight:"));
        RobotMap.driveTrainFR.set(SmartDashboard.getNumber("CAN FrontRight:"));
       
        
        RobotMap.containerMotor.set(SmartDashboard.getNumber("Container Hook:"));
        RobotMap.intakeMotor1.set(SmartDashboard.getNumber("Intake Motor 1:"));
        RobotMap.intakeMotor2.set(SmartDashboard.getNumber("Intake Motor 2:"));
        RobotMap.stackEmMotor.set(SmartDashboard.getNumber("Stack Em Motor:"));
	 /*
    	Joystick joyman = new Joystick(4);
    	System.out.println(joyman.getTrigger());
    	System.out.println(joyman.getPOV());
    	SmartDashboard.putNumber("Pov", joyman.getPOV());
 
      */
    }
}
