// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3489.Mechatrina.commands;

import org.usfirst.frc3489.Mechatrina.Robot;
import org.usfirst.frc3489.Mechatrina.RobotMap;

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class  DefaultContainerLift extends Command {

    public DefaultContainerLift() {
    	requires(Robot.containerLifter);
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(Robot.oi.manipulatorLeft.getButtonCount()>=2){
	    	if(Robot.oi.manipulatorLeft.getPOV() == 0){
	    		Robot.containerLifter.lifterUp();
	    		//System.out.println("Limit switch is - " + RobotMap.containerUpperLimitSwitch.get());
	    	}
	    	else if(Robot.oi.manipulatorLeft.getPOV() == 180){
	    		Robot.containerLifter.lifterDown();
	    	}
	    	else if(Robot.globalVariables.containerDown == true){
	    			Robot.containerLifter.lifterDown();
	    	}
	    	else{
	        	Robot.containerLifter.motorOff();
	    	}
	    } else {
	    	Robot.containerLifter.motorOff();
	    }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
